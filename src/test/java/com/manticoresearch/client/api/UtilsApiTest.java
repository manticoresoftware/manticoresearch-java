/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.api;

import com.manticoresearch.client.*;
import com.manticoresearch.client.auth.*;
import com.manticoresearch.client.model.*;
import com.manticoresearch.client.model.ErrorResponse;

import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.math.BigDecimal;
/**
 * API tests for UtilsApi
 */
public class UtilsApiTest {

    private static final String BASE_PATH = "http://localhost:9408";
    private IndexApi indexApi;
    private SearchApi searchApi;
    private UtilsApi utilsApi;
     
	@BeforeEach                                         
    public void setUp() {
    	try {
	        ApiClient client = Configuration.getDefaultApiClient();
		    client.setBasePath(BASE_PATH);
		    indexApi = new IndexApi(client);
		    searchApi = new SearchApi(client);
		    utilsApi = new UtilsApi(client);
		    utilsApi.sql("DROP TABLE IF EXISTS movies", true);
		    utilsApi.sql("DROP TABLE IF EXISTS products", true);
	    } catch (ApiException e) {
	      System.err.println("Exception when setting up tests");
	      System.err.println("Status code: " + e.getCode());
	      System.err.println("Reason: " + e.getResponseBody());
	      System.err.println("Response headers: " + e.getResponseHeaders());
	      e.printStackTrace();
	    }  
    }
    
    interface PercolateSubTests {
    	void BuildPercolateRequestData() throws ApiException;
    }
    
    interface SearchSubTests {
        void BuildSearchRequestData() throws ApiException;
        void TestBasicSearch(SearchRequest searchRequest) throws ApiException;
	    void TestSearchSort(SearchRequest searchRequest) throws ApiException;
	    void TestSearchExpressions(SearchRequest searchRequest) throws ApiException;
	    void TestSearchAggregations(SearchRequest searchRequest) throws ApiException;
	    void TestSearchHighlight(SearchRequest searchRequest) throws ApiException;
	    void TestSearchFulltextFilters(SearchRequest searchRequest) throws ApiException;
	    void TestSearchAttrFilters(SearchRequest searchRequest) throws ApiException;
	    void TestSearchBoolFilter(SearchRequest searchRequest) throws ApiException;
    }

    /**
     * Perform SQL requests
     *
     * Run a query in SQL format. Expects a query string passed through &#x60;body&#x60; parameter and optional &#x60;raw_response&#x60; parameter that defines a format of response. &#x60;raw_response&#x60; can be set to &#x60;False&#x60; for Select queries only, e.g., &#x60;SELECT * FROM myindex&#x60; The query string must stay as it is, no URL encoding is needed. The response object depends on the query executed. In select mode the response has same format as &#x60;/search&#x60; operation. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sqlTest() throws ApiException {
        //String body = null;
        //Boolean rawResponse = null;
        //List<Object> response = api.sql(body, rawResponse);
        // TODO: test validations
        try {
        	ApiClient client = Configuration.getDefaultApiClient();
		    client.setBasePath(BASE_PATH);
		    UtilsApi utilsApi = new UtilsApi(client);
		    
	        String sql ="DROP TABLE IF EXISTS products";
	        Object sqlresult = utilsApi.sql(sql, true);
	        System.out.println(sqlresult);
	        
	        sqlresult = utilsApi.sql("CREATE TABLE IF NOT EXISTS products (title text, price float, sizes multi, meta json, coeff float, tags1 multi, tags2 multi)", true);
	        System.out.println(sqlresult);        
	
	        sql ="SELECT * FROM products";
	        sqlresult = utilsApi.sql(sql, false);
	        System.out.println(sqlresult);        
	        
	        sql ="SELECT * FROM products";
	        sqlresult = utilsApi.sql(sql, false);
	        System.out.println(sqlresult);
	        
	        sql ="TRUNCATE TABLE products";
	        sqlresult = utilsApi.sql(sql, true);
	        System.out.println(sqlresult); 
	        
	        sqlresult =  utilsApi.sql("SHOW TABLES", true);
        	System.out.println(sqlresult);
	        
	        System.out.println("Util tests finished");
        } catch (ApiException e) {
	      e.printStackTrace();
	      fail("Test failed: " + e.getResponseBody());
	    }

    }

}
