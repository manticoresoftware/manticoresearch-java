/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 3.3.1
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.api;

import com.manticoresearch.client.*;
import com.manticoresearch.client.auth.*;
import com.manticoresearch.client.model.*;
import com.manticoresearch.client.model.ErrorResponse;
import com.manticoresearch.client.model.PercolateRequest;
import com.manticoresearch.client.model.SearchRequest;
import com.manticoresearch.client.model.SearchResponse;

import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.Arrays;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import java.math.BigDecimal;
/**
 * API tests for SearchApi
 */
public class SearchApiTest {

    private static final String BASE_PATH = "http://localhost:9408";
    private IndexApi indexApi;
    private SearchApi searchApi;
    private UtilsApi utilsApi;
     
	@BeforeEach                                         
    public void setUp() {
    	try {
	        ApiClient client = Configuration.getDefaultApiClient();
		    client.setBasePath(BASE_PATH);
		    indexApi = new IndexApi(client);
		    searchApi = new SearchApi(client);
		    utilsApi = new UtilsApi(client);
		    utilsApi.sql("DROP TABLE IF EXISTS movies", true);
		    utilsApi.sql("DROP TABLE IF EXISTS products", true);
	    } catch (ApiException e) {
	      System.err.println("Exception when setting up tests");
	      System.err.println("Status code: " + e.getCode());
	      System.err.println("Reason: " + e.getResponseBody());
	      System.err.println("Response headers: " + e.getResponseHeaders());
	      e.printStackTrace();
	    }  
    }
    
    interface SearchSubTests {
        void BuildSearchRequestData() throws ApiException;
        void TestBasicSearch(SearchRequest searchRequest) throws ApiException;
    }

   
    /**
     * Performs a search on an index
     *
     *  The method expects an object with the following mandatory properties: * the name of the index to search * the match query object For details, see the documentation on [**SearchRequest**](SearchRequest.md) The method returns an object with the following properties: - took: the time taken to execute the search query. - timed_out: a boolean indicating whether the query timed out. - hits: an object with the following properties:    - total: the total number of hits found.    - hits: an array of hit objects, where each hit object represents a matched document. Each hit object has the following properties:      - _id: the ID of the matched document.      - _score: the score of the matched document.      - _source: the source data of the matched document.  In addition, if profiling is enabled, the response will include an additional array with profiling information attached. Here is an example search response:    &#x60;&#x60;&#x60;   {     &#39;took&#39;:10,     &#39;timed_out&#39;:false,     &#39;hits&#39;:     {       &#39;total&#39;:2,       &#39;hits&#39;:       [         {&#39;_id&#39;:&#39;1&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:11}},         {&#39;_id&#39;:&#39;2&#39;,&#39;_score&#39;:1,&#39;_source&#39;:{&#39;gid&#39;:12}}       ]     }   }   &#x60;&#x60;&#x60;  For more information about the match query syntax and additional parameters that can be added to request and response, please see the documentation [here](https://manual.manticoresearch.com/Searching/Full_text_matching/Basic_usage#HTTP-JSON). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTest() throws ApiException {
        //SearchRequest searchRequest = null;
        //SearchResponse response = api.search(searchRequest);
        // TODO: test validations
		try {
	        SearchSubTests subTests = new SearchSubTests() {
	            public void BuildSearchRequestData() throws ApiException
	            {
	                utilsApi.sql("CREATE TABLE IF NOT EXISTS movies (title text, plot text, _year integer, rating float, cat string, code multi, type_vector float_vector knn_type='hnsw' knn_dims='3' hnsw_similarity='l2' )", true);
    
				    List<String> docs = Arrays.asList(
						"{\"insert\": {\"index\" : \"movies\", \"id\" : 1, \"doc\" : {\"title\" : \"Star Trek 2: Nemesis\", \"plot\": \"The Enterprise is diverted to the Romulan homeworld Romulus, supposedly because they want to negotiate a peace treaty. Captain Picard and his crew discover a serious threat to the Federation once Praetor Shinzon plans to attack Earth.\", \"_year\": 2002, \"rating\": 6.4, \"cat\": \"R\", \"code\": [1,2,3], \"type_vector\": [0.2, 1.4, -2.3]}}}",
				        "{\"insert\": {\"index\" : \"movies\", \"id\" : 2, \"doc\" : {\"title\" : \"Star Trek 1: Nemesis\", \"plot\": \"The Enterprise is diverted to the Romulan homeworld Romulus, supposedly because they want to negotiate a peace treaty. Captain Picard and his crew discover a serious threat to the Federation once Praetor Shinzon plans to attack Earth.\", \"_year\": 2001, \"rating\": 6.5, \"cat\": \"PG-13\", \"code\": [1,12,3], \"type_vector\": [0.8, 0.4, 1.3]}}}",
				        "{\"insert\": {\"index\" : \"movies\", \"id\" : 3, \"doc\" : {\"title\" : \"Star Trek 3: Nemesis\", \"plot\": \"The Enterprise is diverted to the Romulan homeworld Romulus, supposedly because they want to negotiate a peace treaty. Captain Picard and his crew discover a serious threat to the Federation once Praetor Shinzon plans to attack Earth.\", \"_year\": 2003, \"rating\": 6.6, \"cat\": \"R\", \"code\": [11,2,3], \"type_vector\": [1.5, -1.0, 1.6]}}}",
				        "{\"insert\": {\"index\" : \"movies\", \"id\" : 4, \"doc\" : {\"title\" : \"Star Trek 4: Nemesis\", \"plot\": \"The Enterprise is diverted to the Romulan homeworld Romulus, supposedly because they want to negotiate a peace treaty. Captain Picard and his crew discover a serious threat to the Federation once Praetor Shinzon plans to attack Earth.\", \"_year\": 2003, \"rating\": 6, \"cat\": \"R\", \"code\": [1,2,4], \"type_vector\": [0.4, 2.4, 0.9]}}}"					        	
				    );
			
					BulkResponse res = indexApi.bulk( String.join("\n", docs) );
					System.out.println(res);
	            };
	        
				
			    public void TestBasicSearch(SearchRequest searchRequest) throws ApiException
			    {
					Highlight queryHighlight = new Highlight();
					List<String> highlightFields = new ArrayList<String>();
	    			highlightFields.add("title");
					queryHighlight.setFields(highlightFields);

					SearchQuery query = new SearchQuery();
			        query.setQueryString("Star");

			        searchRequest.index("movies").query(query).highlight(queryHighlight);
					
					Map<String,Object> options = new HashMap<String,Object>();
					options.put("cutoff", 5);
					options.put("ranker", "bm25");
					searchRequest.setOptions(options);
					
					SearchResponse searchResponse = searchApi.search(searchRequest);
					System.out.println(searchResponse);
			    }

	        };
	        
	        SearchRequest searchRequest = new SearchRequest();
	        subTests.BuildSearchRequestData();
	        subTests.TestBasicSearch(searchRequest);
	        
	        System.out.println("\nSearch tests finished\n");
        } catch (ApiException e) {
	      e.printStackTrace();
	      fail("Test failed: " + e.getResponseBody());
	    }         

    }

}
