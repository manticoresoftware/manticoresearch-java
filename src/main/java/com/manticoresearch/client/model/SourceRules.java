/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * Defines which fields to include or exclude in the response for a search query
 */
@JsonPropertyOrder({
  SourceRules.JSON_PROPERTY_INCLUDES,
  SourceRules.JSON_PROPERTY_EXCLUDES
})
@JsonTypeName("sourceRules")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-01T10:06:34.794647478Z[Etc/UTC]", comments = "Generator version: 7.3.0-SNAPSHOT")
public class SourceRules {
  public static final String JSON_PROPERTY_INCLUDES = "includes";
  private JsonNullable<Object> includes = JsonNullable.<Object>of(new ArrayList<>());

  public static final String JSON_PROPERTY_EXCLUDES = "excludes";
  private JsonNullable<Object> excludes = JsonNullable.<Object>of(new ArrayList<>(Arrays.asList("")));

  public SourceRules() { 
  }

  public SourceRules includes(Object includes) {
    this.includes = JsonNullable.<Object>of(includes);
    return this;
  }

  /**
   * List of fields to include in the response
   * @return includes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getIncludes() {
        return includes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getIncludes_JsonNullable() {
    return includes;
  }
  
  @JsonProperty(JSON_PROPERTY_INCLUDES)
  public void setIncludes_JsonNullable(JsonNullable<Object> includes) {
    this.includes = includes;
  }

  public void setIncludes(Object includes) {
    this.includes = JsonNullable.<Object>of(includes);
  }


  public SourceRules excludes(Object excludes) {
    this.excludes = JsonNullable.<Object>of(excludes);
    return this;
  }

  /**
   * List of fields to exclude from the response
   * @return excludes
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getExcludes() {
        return excludes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EXCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getExcludes_JsonNullable() {
    return excludes;
  }
  
  @JsonProperty(JSON_PROPERTY_EXCLUDES)
  public void setExcludes_JsonNullable(JsonNullable<Object> excludes) {
    this.excludes = excludes;
  }

  public void setExcludes(Object excludes) {
    this.excludes = JsonNullable.<Object>of(excludes);
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public SourceRules putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this sourceRules object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceRules sourceRules = (SourceRules) o;
    return equalsNullable(this.includes, sourceRules.includes) &&
        equalsNullable(this.excludes, sourceRules.excludes)&&
        Objects.equals(this.additionalProperties, sourceRules.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(includes), hashCodeNullable(excludes), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceRules {\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

