/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * Defines which fields to include or exclude in the response for a search query
 */
@JsonPropertyOrder({
  SourceRules.JSON_PROPERTY_INCLUDES,
  SourceRules.JSON_PROPERTY_EXCLUDES
})
@JsonTypeName("sourceRules")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-22T11:46:23.698699442Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class SourceRules {
  public static final String JSON_PROPERTY_INCLUDES = "includes";
  private List<String> includes = new ArrayList<>();

  public static final String JSON_PROPERTY_EXCLUDES = "excludes";
  private List<String> excludes = new ArrayList<>(Arrays.asList(""));

  public SourceRules() { 
  }

  public SourceRules includes(List<String> includes) {
    this.includes = includes;
    return this;
  }

  public SourceRules addIncludesItem(String includesItem) {
    if (this.includes == null) {
      this.includes = new ArrayList<>();
    }
    this.includes.add(includesItem);
    return this;
  }

  /**
   * List of fields to include in the response
   * @return includes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getIncludes() {
    return includes;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncludes(List<String> includes) {
    this.includes = includes;
  }


  public SourceRules excludes(List<String> excludes) {
    this.excludes = excludes;
    return this;
  }

  public SourceRules addExcludesItem(String excludesItem) {
    if (this.excludes == null) {
      this.excludes = new ArrayList<>(Arrays.asList(""));
    }
    this.excludes.add(excludesItem);
    return this;
  }

  /**
   * List of fields to exclude from the response
   * @return excludes
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getExcludes() {
    return excludes;
  }


  @JsonProperty(JSON_PROPERTY_EXCLUDES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExcludes(List<String> excludes) {
    this.excludes = excludes;
  }

  /**
   * Return true if this sourceRules object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SourceRules sourceRules = (SourceRules) o;
    return Objects.equals(this.includes, sourceRules.includes) &&
        Objects.equals(this.excludes, sourceRules.excludes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(includes, excludes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SourceRules {\n");
    sb.append("    includes: ").append(toIndentedString(includes)).append("\n");
    sb.append("    excludes: ").append(toIndentedString(excludes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

