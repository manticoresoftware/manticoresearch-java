/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * SqlObjResponse
 */
@JsonPropertyOrder({
  SqlObjResponse.JSON_PROPERTY_HITS,
  SqlObjResponse.JSON_PROPERTY_TOOK,
  SqlObjResponse.JSON_PROPERTY_TIMED_OUT
})
@JsonTypeName("sqlObjResponse")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-01T10:45:30.595251539Z[Etc/UTC]", comments = "Generator version: 7.3.0-SNAPSHOT")
public class SqlObjResponse {
  public static final String JSON_PROPERTY_HITS = "hits";
  private Object hits;

  public static final String JSON_PROPERTY_TOOK = "took";
  private BigDecimal took;

  public static final String JSON_PROPERTY_TIMED_OUT = "timed_out";
  private Boolean timedOut;

  public SqlObjResponse() { 
  }

  public SqlObjResponse hits(Object hits) {
    this.hits = hits;
    return this;
  }

  /**
   * Get hits
   * @return hits
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getHits() {
    return hits;
  }


  @JsonProperty(JSON_PROPERTY_HITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHits(Object hits) {
    this.hits = hits;
  }


  public SqlObjResponse took(BigDecimal took) {
    this.took = took;
    return this;
  }

  /**
   * Get took
   * @return took
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getTook() {
    return took;
  }


  @JsonProperty(JSON_PROPERTY_TOOK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTook(BigDecimal took) {
    this.took = took;
  }


  public SqlObjResponse timedOut(Boolean timedOut) {
    this.timedOut = timedOut;
    return this;
  }

  /**
   * Get timedOut
   * @return timedOut
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMED_OUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTimedOut() {
    return timedOut;
  }


  @JsonProperty(JSON_PROPERTY_TIMED_OUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimedOut(Boolean timedOut) {
    this.timedOut = timedOut;
  }


  /**
   * Return true if this sqlObjResponse object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlObjResponse sqlObjResponse = (SqlObjResponse) o;
    return Objects.equals(this.hits, sqlObjResponse.hits) &&
        Objects.equals(this.took, sqlObjResponse.took) &&
        Objects.equals(this.timedOut, sqlObjResponse.timedOut);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hits, took, timedOut);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlObjResponse {\n");
    sb.append("    hits: ").append(toIndentedString(hits)).append("\n");
    sb.append("    took: ").append(toIndentedString(took)).append("\n");
    sb.append("    timedOut: ").append(toIndentedString(timedOut)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

