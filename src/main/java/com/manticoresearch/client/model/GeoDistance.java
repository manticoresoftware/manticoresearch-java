/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.manticoresearch.client.model.GeoDistanceLocationAnchor;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * Object to perform geo-distance based filtering on queries
 */
@JsonPropertyOrder({
  GeoDistance.JSON_PROPERTY_LOCATION_ANCHOR,
  GeoDistance.JSON_PROPERTY_LOCATION_SOURCE,
  GeoDistance.JSON_PROPERTY_DISTANCE_TYPE,
  GeoDistance.JSON_PROPERTY_DISTANCE
})
@JsonTypeName("geoDistance")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-28T12:56:08.804080940Z[Etc/UTC]", comments = "Generator version: 7.3.0-SNAPSHOT")
public class GeoDistance {
  public static final String JSON_PROPERTY_LOCATION_ANCHOR = "location_anchor";
  private GeoDistanceLocationAnchor locationAnchor;

  public static final String JSON_PROPERTY_LOCATION_SOURCE = "location_source";
  private JsonNullable<Object> locationSource = JsonNullable.<Object>undefined();

  /**
   * Algorithm used to calculate the distance
   */
  public enum DistanceTypeEnum {
    ADAPTIVE("adaptive"),
    
    HAVERSINE("haversine");

    private Object value;

    DistanceTypeEnum(Object value) {
      this.value = value;
    }

    @JsonValue
    public Object getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DistanceTypeEnum fromValue(Object value) {
      for (DistanceTypeEnum b : DistanceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_DISTANCE_TYPE = "distance_type";
  private JsonNullable<DistanceTypeEnum> distanceType = JsonNullable.<DistanceTypeEnum>undefined();

  public static final String JSON_PROPERTY_DISTANCE = "distance";
  private JsonNullable<Object> distance = JsonNullable.<Object>undefined();

  public GeoDistance() { 
  }

  public GeoDistance locationAnchor(GeoDistanceLocationAnchor locationAnchor) {
    this.locationAnchor = locationAnchor;
    return this;
  }

  /**
   * Get locationAnchor
   * @return locationAnchor
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCATION_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public GeoDistanceLocationAnchor getLocationAnchor() {
    return locationAnchor;
  }


  @JsonProperty(JSON_PROPERTY_LOCATION_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLocationAnchor(GeoDistanceLocationAnchor locationAnchor) {
    this.locationAnchor = locationAnchor;
  }


  public GeoDistance locationSource(Object locationSource) {
    this.locationSource = JsonNullable.<Object>of(locationSource);
    return this;
  }

  /**
   * Field name in the document that contains location data
   * @return locationSource
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getLocationSource() {
        return locationSource.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LOCATION_SOURCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLocationSource_JsonNullable() {
    return locationSource;
  }
  
  @JsonProperty(JSON_PROPERTY_LOCATION_SOURCE)
  public void setLocationSource_JsonNullable(JsonNullable<Object> locationSource) {
    this.locationSource = locationSource;
  }

  public void setLocationSource(Object locationSource) {
    this.locationSource = JsonNullable.<Object>of(locationSource);
  }


  public GeoDistance distanceType(DistanceTypeEnum distanceType) {
    this.distanceType = JsonNullable.<DistanceTypeEnum>of(distanceType);
    return this;
  }

  /**
   * Algorithm used to calculate the distance
   * @return distanceType
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public DistanceTypeEnum getDistanceType() {
        return distanceType.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISTANCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<DistanceTypeEnum> getDistanceType_JsonNullable() {
    return distanceType;
  }
  
  @JsonProperty(JSON_PROPERTY_DISTANCE_TYPE)
  public void setDistanceType_JsonNullable(JsonNullable<DistanceTypeEnum> distanceType) {
    this.distanceType = distanceType;
  }

  public void setDistanceType(DistanceTypeEnum distanceType) {
    this.distanceType = JsonNullable.<DistanceTypeEnum>of(distanceType);
  }


  public GeoDistance distance(Object distance) {
    this.distance = JsonNullable.<Object>of(distance);
    return this;
  }

  /**
   * The distance from the anchor point to filter results by
   * @return distance
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getDistance() {
        return distance.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DISTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDistance_JsonNullable() {
    return distance;
  }
  
  @JsonProperty(JSON_PROPERTY_DISTANCE)
  public void setDistance_JsonNullable(JsonNullable<Object> distance) {
    this.distance = distance;
  }

  public void setDistance(Object distance) {
    this.distance = JsonNullable.<Object>of(distance);
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   */
  @JsonAnySetter
  public GeoDistance putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this geoDistance object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoDistance geoDistance = (GeoDistance) o;
    return Objects.equals(this.locationAnchor, geoDistance.locationAnchor) &&
        equalsNullable(this.locationSource, geoDistance.locationSource) &&
        equalsNullable(this.distanceType, geoDistance.distanceType) &&
        equalsNullable(this.distance, geoDistance.distance)&&
        Objects.equals(this.additionalProperties, geoDistance.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationAnchor, hashCodeNullable(locationSource), hashCodeNullable(distanceType), hashCodeNullable(distance), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoDistance {\n");
    sb.append("    locationAnchor: ").append(toIndentedString(locationAnchor)).append("\n");
    sb.append("    locationSource: ").append(toIndentedString(locationSource)).append("\n");
    sb.append("    distanceType: ").append(toIndentedString(distanceType)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

