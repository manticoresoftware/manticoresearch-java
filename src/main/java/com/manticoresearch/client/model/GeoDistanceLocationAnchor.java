/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * Specifies the location of the pin point used for search
 */
@JsonPropertyOrder({
  GeoDistanceLocationAnchor.JSON_PROPERTY_LAT,
  GeoDistanceLocationAnchor.JSON_PROPERTY_LON
})
@JsonTypeName("geoDistance_location_anchor")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-31T04:42:17.765433185Z[Etc/UTC]", comments = "Generator version: 7.3.0-SNAPSHOT")
public class GeoDistanceLocationAnchor {
  public static final String JSON_PROPERTY_LAT = "lat";
  private JsonNullable<Object> lat = JsonNullable.<Object>undefined();

  public static final String JSON_PROPERTY_LON = "lon";
  private JsonNullable<Object> lon = JsonNullable.<Object>undefined();

  public GeoDistanceLocationAnchor() { 
  }

  public GeoDistanceLocationAnchor lat(Object lat) {
    this.lat = JsonNullable.<Object>of(lat);
    return this;
  }

  /**
   * Latitude of the anchor point
   * @return lat
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getLat() {
        return lat.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLat_JsonNullable() {
    return lat;
  }
  
  @JsonProperty(JSON_PROPERTY_LAT)
  public void setLat_JsonNullable(JsonNullable<Object> lat) {
    this.lat = lat;
  }

  public void setLat(Object lat) {
    this.lat = JsonNullable.<Object>of(lat);
  }


  public GeoDistanceLocationAnchor lon(Object lon) {
    this.lon = JsonNullable.<Object>of(lon);
    return this;
  }

  /**
   * Longitude of the anchor point
   * @return lon
   */
  @jakarta.annotation.Nullable
  @JsonIgnore

  public Object getLon() {
        return lon.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_LON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getLon_JsonNullable() {
    return lon;
  }
  
  @JsonProperty(JSON_PROPERTY_LON)
  public void setLon_JsonNullable(JsonNullable<Object> lon) {
    this.lon = lon;
  }

  public void setLon(Object lon) {
    this.lon = JsonNullable.<Object>of(lon);
  }


  /**
   * Return true if this geoDistance_location_anchor object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoDistanceLocationAnchor geoDistanceLocationAnchor = (GeoDistanceLocationAnchor) o;
    return equalsNullable(this.lat, geoDistanceLocationAnchor.lat) &&
        equalsNullable(this.lon, geoDistanceLocationAnchor.lon);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(lat), hashCodeNullable(lon));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoDistanceLocationAnchor {\n");
    sb.append("    lat: ").append(toIndentedString(lat)).append("\n");
    sb.append("    lon: ").append(toIndentedString(lon)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

