/*
 * Manticore Search Client
 * Ð¡lient for Manticore Search. 
 *
 * The version of the OpenAPI document: 5.0.0
 * Contact: info@manticoresearch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.manticoresearch.client.model;

import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.manticoresearch.client.model.KnnQuery;
import com.manticoresearch.client.model.QueryFilter;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.manticoresearch.client.JSON;


/**
 * Object representing a k-nearest neighbor search query
 */
@JsonPropertyOrder({
  Knn.JSON_PROPERTY_FIELD,
  Knn.JSON_PROPERTY_K,
  Knn.JSON_PROPERTY_QUERY,
  Knn.JSON_PROPERTY_QUERY_VECTOR,
  Knn.JSON_PROPERTY_DOC_ID,
  Knn.JSON_PROPERTY_EF,
  Knn.JSON_PROPERTY_FILTER
})
@JsonTypeName("knn")
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-10-22T12:00:11.264281797Z[Etc/UTC]", comments = "Generator version: 7.17.0-SNAPSHOT")
public class Knn {
  public static final String JSON_PROPERTY_FIELD = "field";
  private String field;

  public static final String JSON_PROPERTY_K = "k";
  private Integer k;

  public static final String JSON_PROPERTY_QUERY = "query";
  private KnnQuery query;

  public static final String JSON_PROPERTY_QUERY_VECTOR = "query_vector";
  private List<BigDecimal> queryVector = new ArrayList<>();

  public static final String JSON_PROPERTY_DOC_ID = "doc_id";
  private Long docId;

  public static final String JSON_PROPERTY_EF = "ef";
  private Integer ef;

  public static final String JSON_PROPERTY_FILTER = "filter";
  private QueryFilter filter;

  public Knn() { 
  }

  public Knn field(String field) {
    this.field = field;
    return this;
  }

  /**
   * Field to perform the k-nearest neighbor search on
   * @return field
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getField() {
    return field;
  }


  @JsonProperty(JSON_PROPERTY_FIELD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setField(String field) {
    this.field = field;
  }


  public Knn k(Integer k) {
    this.k = k;
    return this;
  }

  /**
   * The number of nearest neighbors to return
   * @return k
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_K)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getK() {
    return k;
  }


  @JsonProperty(JSON_PROPERTY_K)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setK(Integer k) {
    this.k = k;
  }


  public Knn query(KnnQuery query) {
    this.query = query;
    return this;
  }

  /**
   * Get query
   * @return query
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KnnQuery getQuery() {
    return query;
  }


  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(KnnQuery query) {
    this.query = query;
  }


  public Knn queryVector(List<BigDecimal> queryVector) {
    this.queryVector = queryVector;
    return this;
  }

  public Knn addQueryVectorItem(BigDecimal queryVectorItem) {
    if (this.queryVector == null) {
      this.queryVector = new ArrayList<>();
    }
    this.queryVector.add(queryVectorItem);
    return this;
  }

  /**
   * The vector used as input for the KNN search
   * @return queryVector
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUERY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<BigDecimal> getQueryVector() {
    return queryVector;
  }


  @JsonProperty(JSON_PROPERTY_QUERY_VECTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQueryVector(List<BigDecimal> queryVector) {
    this.queryVector = queryVector;
  }


  public Knn docId(Long docId) {
    this.docId = docId;
    return this;
  }

  /**
   * The docuemnt ID used as input for the KNN search
   * @return docId
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDocId() {
    return docId;
  }


  @JsonProperty(JSON_PROPERTY_DOC_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocId(Long docId) {
    this.docId = docId;
  }


  public Knn ef(Integer ef) {
    this.ef = ef;
    return this;
  }

  /**
   * Optional parameter controlling the accuracy of the search
   * @return ef
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getEf() {
    return ef;
  }


  @JsonProperty(JSON_PROPERTY_EF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEf(Integer ef) {
    this.ef = ef;
  }


  public Knn filter(QueryFilter filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public QueryFilter getFilter() {
    return filter;
  }


  @JsonProperty(JSON_PROPERTY_FILTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilter(QueryFilter filter) {
    this.filter = filter;
  }

  /**
   * Return true if this knn object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Knn knn = (Knn) o;
    return Objects.equals(this.field, knn.field) &&
        Objects.equals(this.k, knn.k) &&
        Objects.equals(this.query, knn.query) &&
        Objects.equals(this.queryVector, knn.queryVector) &&
        Objects.equals(this.docId, knn.docId) &&
        Objects.equals(this.ef, knn.ef) &&
        Objects.equals(this.filter, knn.filter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(field, k, query, queryVector, docId, ef, filter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Knn {\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    k: ").append(toIndentedString(k)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    queryVector: ").append(toIndentedString(queryVector)).append("\n");
    sb.append("    docId: ").append(toIndentedString(docId)).append("\n");
    sb.append("    ef: ").append(toIndentedString(ef)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

